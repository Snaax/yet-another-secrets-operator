name: Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      # Install controller-gen
      - name: Install controller-gen
        run: |
          go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.9.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      # Generate DeepCopy code
      - name: Generate code
        run: |
          mkdir -p hack
          echo '/*
          Copyright 2023.

          Licensed under the MIT License.
          */' > hack/boilerplate.go.txt
          controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./..."

      # Extract chart version
      - name: Extract chart version
        id: chart_version
        run: |
          VERSION=$(grep 'version:' chart/yet-another-secrets-operator/Chart.yaml | awk '{print $2}')
          APP_VERSION=$(grep 'appVersion:' chart/yet-another-secrets-operator/Chart.yaml | awk '{print $2}')
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
          
          # If this is a tag push, use that as version
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG=${GITHUB_REF#refs/tags/v}
            echo "Using tag version: ${TAG}"
            echo "version=${TAG}" >> $GITHUB_OUTPUT
            echo "app_version=${TAG}" >> $GITHUB_OUTPUT
          fi

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.chart_version.outputs.app_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      # Update chart values with correct image reference
      - name: Update Helm chart values
        run: |
          # Update values.yaml with the correct image reference
          sed -i "s|repository: example/another-secrets-operator|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g" chart/yet-another-secrets-operator/values.yaml
          sed -i "s|tag: latest|tag: ${{ steps.chart_version.outputs.app_version }}|g" chart/yet-another-secrets-operator/values.yaml
          
          # Update chart version if this is a tag push
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            sed -i "s|version: .*|version: ${{ steps.chart_version.outputs.version }}|g" chart/yet-another-secrets-operator/Chart.yaml
            sed -i "s|appVersion: .*|appVersion: ${{ steps.chart_version.outputs.app_version }}|g" chart/yet-another-secrets-operator/Chart.yaml
          fi

      # Package Helm chart
      - name: Package Helm chart
        run: |
          mkdir -p .cr-release-packages
          helm package chart/yet-another-secrets-operator --destination .cr-release-packages

      # Publish Helm chart to GHCR
      - name: Create and publish Helm repository
        run: |
          # Create index file
          helm repo index .cr-release-packages --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/charts
          
          # Deploy to GitHub Pages
          mkdir -p public/charts
          cp .cr-release-packages/*.tgz public/charts/
          cp .cr-release-packages/index.yaml public/charts/
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public